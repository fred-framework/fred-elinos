=====================
 FRED for Elinos 7.1
=====================

This Elinos System Project, where ELinos is configure to work with the FRED Framework. 
This is also where the Linux kernel and image are configured.

One of the most timing consuming part of this configuration was to figure out which are the Kernel requirements to work with FRED.
It turns out that the default Petalinux kernel configuration enables several features by default. Elinos, on the other hand,
disables lots of kernel features. So, during the migration from Petalinux to Elinos, a few unknown kernel feature dependencies were unveiled. 
Now these kernel features are documented in https://github.com/fred-framework/meta-fred#kernel-requirements. Use this list (and keep it up-to-date) 
if FRED is ported to newer versions of Linux OS in the future.

Besides configuring Elinos for FRED, this project also add external tools to the image (tree, dtc, rsync, cpufreq, etc 
located in zcu102_hwvirt_linux.app/app.rootfs/) and it also compiles the FRED kernel modules in src/kernel-modules.
https://github.com/fred-framework/fred-linux-fpga-mgr-fmod/commit/e7f9bb0cca1227eb34819acb8f9b29c6bac69ef7
https://github.com/fred-framework/fred-linux-buffctl-kmod/commit/9c0b9677ad830c1bb520853afe4318efcdc9907f

If you need to add more tools to the image that are not promptly available in Elinos, I recommend
you copy the required binaries and libraries out of a Petalinux project. Petalinux by default enables much more tools than Elinos, and it is most probably already compiled there. That's what I did for tree, dtc, and cpufreq.

Restoring the ElinOS Project
==============================

Run 

```
$ cd zcu102_hwvirt_linux.app
$ /opt/elinos-7.1/bin/elinos-share-project import
$ ./configure -n
$ . ./ELINOS.sh
```

to restore the project once the repository is cloned.

Generating the Linux Image and Updating the SD-card
=====================================================

First, run `make install` in fred-lib.app and fred-server.app. This will populate zcu102_hwvirt_linux.app/app.rootfs/usr/ with FRED server and it's libraries.

Run `make boot` to compile the kernel and generate the ElinOS image. This process takes about 10 to 15 minutes.

Updating the Device Tree Manually
===================================

Before saving the image into the SD-card we have to add the FPGA configuration into the device tree and also to replace the FPGA-manager driver. This is currently done manually but could be updated to apply a patch, for example. 

Add the following lines inside the device tree axi block related to slot0 and pr_decoupler0:

```
	axi {
		compatible = "simple-bus";
		u-boot,dm-pre-reloc;
		#address-cells = <0x2>;
		#size-cells = <0x2>;
		ranges;

		slot_p0_s0@a0000000 {
			interrupts = <0x00 0x59 0x04>;
			interrupt-parent = <0x01>;
			compatible = "generic-uio";
			reg = <0x00 0xa0000000 0x00 0x10000>;
		};

		pr_decoupler_p0_s0@a0010000 {
			compatible = "generic-uio";
			reg = <0x00 0xa0010000 0x00 0x10000>;
		};
```

To make things easier, there is a modified device tree in `system.dts`. The file `linux-modif.dtb` is a already compiled version of this device tree, such that it's just a matter of replacing the 
device tree generated by ELinOS. Be aware that if ElinOS configuration is changed just that it also changes its device tree, then one needs to make the manual device tree modification again. Checkout the  comment section of the `Makefile`, under rule `boot`, to generate the newer device tree. 

Updating the SD.card
=====================

Run `make burn` to update the SD-card. You might need to change the partition names according to the your sd-card.

Missing Features
=================

 - Linux Device tree overlays was not working. So it is currently using a fixed device tree to specify the FPGA layout (number of slots). This is not ideal because, for example, if more slots are added to the FPGA, then we need to manually add the device tree to correspond this change and rebuild the kernel image. With the use of device tree overlay, which is working in Petalinux, changing the FPGA layout can be incorporated in the Linux image in runtime, while running the image.
 - The shared memory regions, defined in the device tree, among fred-server, fred client app, and fpga-manager must be configured in PikeOS
 - It's possible that the interruptions issues when the IP finishes its tasks, defined in the device tree, should also be mapped in PikeOS.
 - Apply the kernel patches:
    - https://github.com/fred-framework/meta-retis/blob/main/recipes-kernel/linux/files/0001-Disable-runtime-frequency-scaling-in-dl-tasks.patch
    - https://github.com/fred-framework/meta-retis/blob/main/recipes-kernel/linux/files/0002-Set-rt-class-priority-higher-than-dl.patch


Updating the ElinOS configuration
==================================

Since there are still some work to be done to configure ELinos for FRED, it will be necessary to update both Elinos System Project 
and PikeOS project. Run the following command to prepare the project to update the repository. 

```
$ cd zcu102_hwvirt_linux.app
$ /opt/elinos-7.1/bin/elinos-share-project export
```

Then repeat the procedure mentioned above to restore the project.

Diff Elinos configuration
===========================

In the future, when migrating to newer Elinos version, it will be useful to know all the configurations done manually in CODEO.
For this reason, run the command `make diffconfig` to highlight those differences compared to the default Elinos config. Then,
it's is just a matter of finding each parameter in the newer CODEO/Elinos.


 A. Amory
